package main

import "testing"

func TestRun(t *testing.T) {
	input := []byte(`##########
#..O..O.O#
#......O.#
#.OO..O.O#
#..O@..O.#
#O#..O...#
#O..O..O.#
#.OO.O.OO#
#....O...#
##########

<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`)
	m, robot, moves := Parse(input)
	score := Run(m, robot, moves)

	expected := 10092
	if score != expected {
		t.Errorf("expected %d, got %d", expected, score)
	}
}

func TestMoveUp(t *testing.T) {
	m := Map{
		{'#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '[', ']', '.', '#', '#'},
		{'#', '#', '[', ']', '[', ']', '#', '#'},
		{'#', '#', '.', '[', ']', '.', '#', '#'},
		{'#', '#', '.', '@', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#'},
	}
	r := Position{3, 7}
	expected := Map{
		{'#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '[', ']', '.', '#', '#'},
		{'#', '#', '[', ']', '[', ']', '#', '#'},
		{'#', '#', '.', '[', ']', '.', '#', '#'},
		{'#', '#', '.', '@', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#'},
	}
	stepV2(m, &r, Up)
	if m.String() != expected.String() {
		t.Errorf("expected:\n%s\ngot:\n%s", expected, m.String())
	}
}

func TestMoveLeft(t *testing.T) {
	m := Map{
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '[', ']', '[', ']', '[', ']', '@', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
	}
	r := Position{9, 4}
	expected := Map{
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '[', ']', '[', ']', '[', ']', '@', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
	}
	stepV2(m, &r, Left)
	if m.String() != expected.String() {
		t.Errorf("1. expected:\n%s\ngot:\n%s", expected, m.String())
	}
	stepV2(m, &r, Left)
	if m.String() != expected.String() {
		t.Errorf("2. expected:\n%s\ngot:\n%s", expected, m.String())
	}
}

func TestMoveRight(t *testing.T) {
	m := Map{
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '@', '[', ']', '[', ']', '[', ']', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
	}
	r := Position{3, 4}
	expected := Map{
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '@', '[', ']', '[', ']', '[', ']', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
	}
	stepV2(m, &r, Right)
	if m.String() != expected.String() {
		t.Errorf("expected:\n%s\ngot:\n%s", expected, m.String())
	}
	stepV2(m, &r, Right)
	if m.String() != expected.String() {
		t.Errorf("expected:\n%s\ngot:\n%s", expected, m.String())
	}
}

func TestMoveDown(t *testing.T) {
	m := Map{
		{'#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '@', '.', '.', '#', '#'},
		{'#', '#', '[', ']', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#'},
	}
	r := Position{3, 4}
	expected := Map{
		{'#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '.', '@', '.', '.', '#', '#'},
		{'#', '#', '[', ']', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#'},
	}
	stepV2(m, &r, Down)
	if m.String() != expected.String() {
		t.Errorf("expected:\n%s\ngot:\n%s", expected, m.String())
	}
}

func TestRunV2Full(t *testing.T) {
	input := []byte(`##########
#..O..O.O#
#......O.#
#.OO..O.O#
#..O@..O.#
#O#..O...#
#O..O..O.#
#.OO.O.OO#
#....O...#
##########

<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`)
	m, robot, moves := Parse(input)

	mv2, robot := MapV2(m)

	score := RunV2(mv2, robot, moves)

	expected := 9021
	t.Log(mv2.String())
	if score != expected {
		t.Errorf("expected %d, got %d", expected, score)
	}
}

func TestEdgeCase(t *testing.T) {
	cases := []struct {
		input string
		score int
	}{
		{
			input: `#######
#.....#
#.OO@.#
#.....#
#######

<<`,
			score: 406,
		},
		{
			input: `#######
#.....#
#.O#..#
#..O@.#
#.....#
#######

<v<<^`,
			score: 509,
		},
		{
			input: `#######
#.....#
#.#O..#
#..O@.#
#.....#
#######

<v<^`,
			score: 511,
		},
		{
			input: `######
#....#
#.O..#
#.OO@#
#.O..#
#....#
######

<vv<<^
`,
			score: 816,
		},
		{
			input: `#######
#...#.#
#.....#
#.....#
#.....#
#.....#
#.OOO@#
#.OOO.#
#..O..#
#.....#
#.....#
#######

v<vv<<^^^^^`,
			score: 2339,
		},
		{
			input: `#######
#.....#
#..O..#
#@O.O.#
#.#.O.#
#.....#
#######

>>^^>>>>>>vv<^^<<v`,
			score: 1226,
		},
		{
			input: `######
#....#
#..#.#
#....#
#.O..#
#.OO@#
#.O..#
#....#
######

<vv<<^^^`,
			score: 1216,
		},
		{
			input: `########
#......#
#OO....#
#.O....#
#.O....#
##O....#
#O..O@.#
#......#
########

<^^<<>^^^<v`,
			score: 2827,
		},
		{
			input: `########
#..O.O.#
##@.O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

<^^>>>vv<v>>v<<`,
			score: 1751,
		},
		{
			input: `#######
#...#.#
#.....#
#..OO@#
#..O..#
#.....#
#######

<vv<<^^<<^^`,
			score: 618,
		},
	}

	for _, c := range cases {
		t.Run(c.input, func(t *testing.T) {
			m, robot, moves := Parse([]byte(c.input))
			m, robot = MapV2(m)
			score := RunV2(m, robot, moves)

			if score != c.score {
				t.Errorf("expected %d, got %d", c.score, score)
			}
		})
	}

}
